package gont

import (
	"fmt"
	"io"
	"net"
	"os"
	"path/filepath"
	"strings"
)

var (
	IPv4loopback = net.IPv4(127, 0, 0, 1)
)

// GenerateHostsFile writes the addresses and host names of all nodes
// into a file located at /run/gont/<network>/files/etc/hosts
//
// Processes started via BaseNode.Run or BaseNode.Start, will see
// this file bind mounted at /etc/hosts
func (n *Network) GenerateHostsFile() error {
	n.hostsFileLock.Lock()
	defer n.hostsFileLock.Unlock()

	fn := filepath.Join(n.VarPath, "files", "etc", "hosts")
	if err := os.MkdirAll(filepath.Dir(fn), 0755); err != nil {
		return err
	}

	f, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	return n.WriteHostsFile(f)
}

func (n *Network) WriteHostsFile(f io.Writer) error {
	if _, err := fmt.Fprintln(f, "# Autogenerated hosts file by Gont"); err != nil {
		return err
	}

	hosts := map[string][]string{}

	// Loopback addresses
	hosts[IPv4loopback.String()] = []string{"localhost", "localhost.localdomain", "localhost4", "localhost4.localdomain4"}
	hosts[net.IPv6loopback.String()] = []string{"localhost", "localhost.localdomain", "localhost6", "localhost6.localdomain6"}

	add := func(name string, ip net.IP) {
		addr := ip.String()
		if hosts[addr] == nil {
			hosts[addr] = []string{}
		}

		found := false
		for _, n := range hosts[addr] {
			if n == name {
				found = true
			}
		}

		if !found {
			hosts[addr] = append(hosts[addr], name)
		}
	}

	for _, n := range n.nodes {
		if n, ok := n.(*Host); ok {
			for _, i := range n.Interfaces {
				if i.IsLoopback() {
					continue
				}

				for _, a := range i.Addresses {
					add(n.Name(), a.IP)
					add(n.Name()+"-"+i.Name, a.IP)
				}
			}
		}
	}

	for addr, names := range hosts {
		if _, err := fmt.Fprintf(f, "%s %s\n", addr, strings.Join(names, " ")); err != nil {
			return err
		}
	}

	return nil
}

func (n *Network) GenerateConfigFiles() error {
	return n.GenerateIProute2Files()
}

func (n *Network) GenerateIProute2Files() error {
	fn := filepath.Join(n.VarPath, "files/etc/iproute2/group")
	if err := os.MkdirAll(filepath.Dir(fn), 0755); err != nil {
		return err
	}

	f, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	if contentsOrig, err := os.ReadFile("/etc/iproute2/group"); err == nil {
		f.Write(contentsOrig)
		f.WriteString("\n")
	}

	groups := map[DeviceGroup]string{
		DeviceGroupNorthBound: "north-bound",
		DeviceGroupSouthBound: "south-bound",
	}

	for group, name := range groups {
		fmt.Fprintf(f, "%d %s\n", group, name)
	}

	return nil
}
